"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChainRegistryFetcher = exports.ChainInfo = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _utils = require("@chain-registry/utils");
var _bfsPath = require("bfs-path");
var _crossFetch = _interopRequireDefault(require("cross-fetch"));
var fetchUrl = function fetchUrl(url) {
  return (0, _crossFetch["default"])(url).then(function (res) {
    if (res.status >= 400) {
      throw new Error('Bad response');
    }
    return res.json();
  });
};
var ChainInfo = /*#__PURE__*/function () {
  function ChainInfo(options) {
    (0, _classCallCheck2["default"])(this, ChainInfo);
    (0, _defineProperty2["default"])(this, "chain_name", void 0);
    (0, _defineProperty2["default"])(this, "fetcher", void 0);
    (0, _defineProperty2["default"])(this, "_asset_list", void 0);
    (0, _defineProperty2["default"])(this, "_asset_lists", void 0);
    (0, _defineProperty2["default"])(this, "_chain", void 0);
    (0, _defineProperty2["default"])(this, "_ibc_data", []);
    this.chain_name = options.chain_name;
    this.fetcher = options.fetcher;
    this.refresh();
  }
  (0, _createClass2["default"])(ChainInfo, [{
    key: "refresh",
    value: function refresh() {
      this._asset_list = this.fetcher.getChainAssetList(this.chain_name);
      this._ibc_data = this.fetcher.getChainIbcData(this.chain_name);
      this._chain = this.fetcher.getChain(this.chain_name);
      var supportedChains = this._ibc_data.reduce(function (m, v) {
        if (!m.includes(v.chain_1.chain_name)) m.push(v.chain_1.chain_name);
        if (!m.includes(v.chain_2.chain_name)) m.push(v.chain_2.chain_name);
        return m;
      }, []);
      this._asset_lists = this.fetcher.assetLists.filter(function (list) {
        return supportedChains.includes(list.chain_name);
      });
    }
  }, {
    key: "nativeAssetLists",
    get: function get() {
      return this._asset_list;
    }
  }, {
    key: "chain",
    get: function get() {
      return this._chain;
    }
  }, {
    key: "assetLists",
    get: function get() {
      return (0, _utils.getAssetLists)(this.chain_name, this._ibc_data, this._asset_lists);
    }
  }]);
  return ChainInfo;
}(); // QUESTION: should ChainRegistryFetcher just be ChainRegistry?
exports.ChainInfo = ChainInfo;
var ChainRegistryFetcher = /*#__PURE__*/function () {
  function ChainRegistryFetcher() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2["default"])(this, ChainRegistryFetcher);
    (0, _defineProperty2["default"])(this, "_asset_lists", []);
    (0, _defineProperty2["default"])(this, "_chains", []);
    (0, _defineProperty2["default"])(this, "_ibc_data", []);
    (0, _defineProperty2["default"])(this, "urls", []);
    //
    if (options.assetLists) {
      this._asset_lists = options.assetLists;
    }
    if (options.chains) {
      this._chains = options.chains;
    }
    if (options.ibcData) {
      this._ibc_data = options.ibcData;
    }
    if (options.urls) {
      this.urls = options.urls;
    }
  }
  (0, _createClass2["default"])(ChainRegistryFetcher, [{
    key: "assetLists",
    get: function get() {
      return this._asset_lists;
    }
  }, {
    key: "getChainAssetList",
    value: function getChainAssetList(chainName) {
      return this._asset_lists.find(function (list) {
        return list.chain_name === chainName;
      });
    }
  }, {
    key: "getGeneratedAssetLists",
    value: function getGeneratedAssetLists(chainName) {
      return (0, _utils.getAssetLists)(chainName, this._ibc_data, this._asset_lists);
    }
  }, {
    key: "chains",
    get: function get() {
      return this._chains;
    }
  }, {
    key: "getChain",
    value: function getChain(chainName) {
      return this._chains.find(function (chain) {
        return chain.chain_name === chainName;
      });
    }
  }, {
    key: "ibcData",
    get: function get() {
      return this._ibc_data;
    }
  }, {
    key: "getChainIbcData",
    value: function getChainIbcData(chainName) {
      return this._ibc_data.filter(function (info) {
        return info.chain_1.chain_name === chainName || info.chain_2.chain_name === chainName;
      });
    }
  }, {
    key: "getChainInfo",
    value: function getChainInfo(chainName) {
      return new ChainInfo({
        chain_name: chainName,
        fetcher: this
      });
    }
  }, {
    key: "upsertChain",
    value: function upsertChain(data) {
      var found = this._chains.find(function (chain) {
        return chain.chain_name === data.chain_name && chain.network_type === data.network_type;
      });
      if (!found) {
        this._chains.push(data);
        return;
      }
      this._chains = this._chains.map(function (chain) {
        if (chain.chain_name === data.chain_name && chain.network_type === data.network_type) {
          return data;
        } else {
          return chain;
        }
      });
    }
  }, {
    key: "updateAssetList",
    value: function updateAssetList(data) {
      var found = this._asset_lists.find(function (list) {
        return list.chain_name === data.chain_name;
      });
      if (!found) {
        this._asset_lists.push(data);
        return;
      }
      this._asset_lists = this._asset_lists.map(function (list) {
        if (list.chain_name === data.chain_name) {
          return data;
        } else {
          return list;
        }
      });
    }
  }, {
    key: "upsertIbcData",
    value: function upsertIbcData(data) {
      var found = this._ibc_data.find(function (info) {
        return info.chain_1.chain_name === data.chain_1.chain_name && info.chain_2.chain_name === data.chain_2.chain_name;
      });
      if (!found) {
        this._ibc_data.push(data);
        return;
      }
      this._ibc_data = this._ibc_data.map(function (info) {
        if (info.chain_1.chain_name === data.chain_1.chain_name && info.chain_2.chain_name === data.chain_2.chain_name) {
          return data;
        } else {
          return info;
        }
      });
    }
  }, {
    key: "update",
    value: function update(data) {
      if (!data.$schema) throw new Error('not a registered JSON schema type');
      var type = (0, _bfsPath.basename)(data.$schema, '.schema.json');
      switch (type) {
        case 'chain':
          this.upsertChain(data);
          break;
        case 'assetlist':
          this.updateAssetList(data);
          break;
        case 'ibc_data':
          this.upsertIbcData(data);
          break;
        default:
          throw new Error('unknown schema type');
      }
    }
  }, {
    key: "fetch",
    value: function () {
      var _fetch = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(url) {
        var data;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return fetchUrl(url);
              case 2:
                data = _context.sent;
                this.update(data);
              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function fetch(_x) {
        return _fetch.apply(this, arguments);
      }
      return fetch;
    }()
  }, {
    key: "fetchUrls",
    value: function () {
      var _fetchUrls = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var _this = this;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", Promise.all(this.urls.map(function (url) {
                  return _this.fetch(url);
                })));
              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function fetchUrls() {
        return _fetchUrls.apply(this, arguments);
      }
      return fetchUrls;
    }()
  }]);
  return ChainRegistryFetcher;
}();
exports.ChainRegistryFetcher = ChainRegistryFetcher;